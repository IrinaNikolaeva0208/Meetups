version: '3.9'

services:
  auth:
    build:
      context: .
      args:
        SERVICE_NAME: "auth"
    restart: always
    networks:
      - app-network
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      - postgres
      - rabbitmq

  meetups:
    build:
      context: .
      args:
        SERVICE_NAME: "meetups"
    restart: always
    networks:
      - app-network
    ports:
      - "${MEETUPS_PORT}:${MEETUPS_PORT}"
    depends_on:
      - postgres
      - rabbitmq

  gateway:
    build:
      context: .
      args:
        SERVICE_NAME: "gateway"
    restart: always
    networks:
      - app-network
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      - meetups
      - auth

  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: PostgresDockerfile
    restart: always
    networks:
      - app-network
      - elastic
    ports:
      - "${DB_PORT}:${POSTGRES_PORT}"
    env_file:
      - .env
    volumes:
      - app-volume:/app
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "${RABBIT_PORT}:${RABBIT_PORT}"
      - "${WEB_RABBIT_PORT}:${WEB_RABBIT_PORT}"
    networks:
      - app-network

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:7.17.13
    ports:
      - ${ELASTIC_PORT}:${ELASTIC_PORT}
    environment:
      discovery.type: 'single-node'
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      xpack.security.enabled: false
      bootstrap.memory_lock: true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elastic

  kibana:
    image: kibana:7.17.13
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - elastic
    depends_on:
      - elasticsearch

  redis:
    container_name: redis
    image: 'redis:alpine'
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    networks:
      - elastic

  pgsync:
    build:
      context: .
      dockerfile: PgsyncDockerfile
    environment:
      - PG_USER=${POSTGRES_USER}
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - PG_DATABASE=meetups
      - PG_HOST=postgres
      - ELASTICSEARCH_HOST=elasticsearch
      - REDIS_HOST=redis
    networks:
      - elastic
      - app-network
    depends_on:
      - elasticsearch
      - postgres

networks:
  app-network:
  elastic:


volumes:
  app-volume:
